import pandas as pd
import numpy as np
import os

def process_economy_data():
    """X·ª≠ l√Ω d·ªØ li·ªáu kinh t·∫ø"""
    
    print("\nüîß ƒêang x·ª≠ l√Ω d·ªØ li·ªáu kinh t·∫ø...")
    
    # ƒê·ªçc raw data
    df = pd.read_csv('data/raw/economy_data.csv')
    df['date'] = pd.to_datetime(df['date'])
    
    # Feature engineering - Th·ªùi gian
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month
    df['quarter'] = df['date'].dt.quarter
    df['day_of_week'] = df['date'].dt.dayofweek
    df['day_name'] = df['date'].dt.day_name()
    df['month_name'] = df['date'].dt.month_name()
    df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)
    
    # Moving averages - L√†m m∆∞·ª£t d·ªØ li·ªáu
    df['unemployment_ma7'] = df['unemployment_rate'].rolling(window=7, min_periods=1).mean()
    df['unemployment_ma30'] = df['unemployment_rate'].rolling(window=30, min_periods=1).mean()
    
    df['gdp_ma7'] = df['gdp_growth'].rolling(window=7, min_periods=1).mean()
    df['gdp_ma30'] = df['gdp_growth'].rolling(window=30, min_periods=1).mean()
    
    df['stock_ma7'] = df['stock_index'].rolling(window=7, min_periods=1).mean()
    df['stock_ma30'] = df['stock_index'].rolling(window=30, min_periods=1).mean()
    
    df['retail_ma7'] = df['retail_sales'].rolling(window=7, min_periods=1).mean()
    df['retail_ma30'] = df['retail_sales'].rolling(window=30, min_periods=1).mean()
    
    # Changes - Bi·∫øn ƒë·ªông
    df['unemployment_change'] = df['unemployment_rate'].diff()
    df['gdp_change'] = df['gdp_growth'].diff()
    df['stock_change'] = df['stock_index'].pct_change() * 100  # % change
    df['retail_change'] = df['retail_sales'].pct_change() * 100
    
    # Ph√¢n lo·∫°i t√¨nh tr·∫°ng kinh t·∫ø
    df['economic_status'] = pd.cut(df['unemployment_rate'], 
                                    bins=[0, 3, 5, 100],
                                    labels=['T·ªët', 'Trung b√¨nh', 'X·∫•u'])
    
    df['gdp_status'] = pd.cut(df['gdp_growth'], 
                              bins=[-100, 0, 3, 100],
                              labels=['Suy tho√°i', 'Ch·∫≠m', 'TƒÉng tr∆∞·ªüng'])
    
    df['stock_status'] = pd.cut(df['stock_index'],
                                bins=[0, 900, 1200, 2000],
                                labels=['Th·∫•p', 'Trung b√¨nh', 'Cao'])
    
    # X·ª≠ l√Ω missing values - S·ª¨A L·ªñI ·ªû ƒê√ÇY
    df = df.ffill().bfill()
    
    # T·∫°o th∆∞ m·ª•c processed n·∫øu ch∆∞a c√≥
    os.makedirs('data/processed', exist_ok=True)
    
    # L∆∞u processed data
    df.to_csv('data/processed/economy_data_processed.csv', index=False)
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(df)} b·∫£n ghi kinh t·∫ø ‚Üí data/processed/economy_data_processed.csv")
    
    # Th·ªëng k√™
    print("\nüìà Th·ªëng k√™ d·ªØ li·ªáu kinh t·∫ø:")
    print(df[['unemployment_rate', 'gdp_growth', 'stock_index', 'retail_sales']].describe().round(2))
    
    return df

def process_covid_data():
    """X·ª≠ l√Ω d·ªØ li·ªáu COVID-19"""
    
    print("\nüîß ƒêang x·ª≠ l√Ω d·ªØ li·ªáu COVID-19...")
    
    # ƒê·ªçc raw data
    df = pd.read_csv('data/raw/covid_data.csv')
    df['date'] = pd.to_datetime(df['date'])
    
    # Feature engineering
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month
    df['quarter'] = df['date'].dt.quarter
    df['day_of_week'] = df['date'].dt.dayofweek
    df['week_of_year'] = df['date'].dt.isocalendar().week
    
    # Daily changes (ca m·ªõi h√†ng ng√†y)
    df['daily_cases'] = df['cases'].diff().fillna(df['cases'])
    df['daily_deaths'] = df['deaths'].diff().fillna(df['deaths'])
    df['daily_recovered'] = df['recovered'].diff().fillna(df['recovered'])
    
    # Moving averages
    df['cases_ma7'] = df['daily_cases'].rolling(window=7, min_periods=1).mean()
    df['cases_ma14'] = df['daily_cases'].rolling(window=14, min_periods=1).mean()
    
    df['deaths_ma7'] = df['daily_deaths'].rolling(window=7, min_periods=1).mean()
    df['recovered_ma7'] = df['daily_recovered'].rolling(window=7, min_periods=1).mean()
    
    # Mortality rate
    df['mortality_rate'] = (df['deaths'] / df['cases'] * 100).replace([np.inf, -np.inf], 0)
    
    # Recovery rate
    df['recovery_rate'] = (df['recovered'] / df['cases'] * 100).replace([np.inf, -np.inf], 0)
    
    # Active cases (ca ƒëang ƒëi·ªÅu tr·ªã)
    df['active_cases'] = df['cases'] - df['deaths'] - df['recovered']
    
    # Growth rate (t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng)
    df['growth_rate'] = df['daily_cases'].pct_change() * 100
    df['growth_rate'] = df['growth_rate'].replace([np.inf, -np.inf], 0).fillna(0)
    
    # Ph√¢n lo·∫°i m·ª©c ƒë·ªô nghi√™m tr·ªçng
    df['severity'] = pd.cut(df['daily_cases'],
                           bins=[0, 1000, 5000, 100000],
                           labels=['Th·∫•p', 'Trung b√¨nh', 'Cao'])
    
    # X·ª≠ l√Ω missing values - S·ª¨A L·ªñI ·ªû ƒê√ÇY
    # X·ª≠ l√Ω numeric columns
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    df[numeric_cols] = df[numeric_cols].ffill().bfill().fillna(0)
    
    # X·ª≠ l√Ω categorical columns
    categorical_cols = df.select_dtypes(include=['category', 'object']).columns
    for col in categorical_cols:
        if col != 'date':  # Kh√¥ng x·ª≠ l√Ω c·ªôt date
            df[col] = df[col].ffill().bfill()
    
    # L∆∞u processed data
    df.to_csv('data/processed/covid_data_processed.csv', index=False)
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(df)} b·∫£n ghi COVID ‚Üí data/processed/covid_data_processed.csv")
    
    # Th·ªëng k√™
    print("\nüìä Th·ªëng k√™ d·ªØ li·ªáu COVID-19:")
    print(df[['cases', 'deaths', 'recovered', 'daily_cases']].describe().round(2))
    
    return df

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu...\n")
    
    # X·ª≠ l√Ω d·ªØ li·ªáu kinh t·∫ø
    economy_df = process_economy_data()
    
    # X·ª≠ l√Ω d·ªØ li·ªáu COVID
    covid_df = process_covid_data()
    
    print("\n‚ú® Ho√†n th√†nh x·ª≠ l√Ω d·ªØ li·ªáu!")
    print(f"\nüìÅ C√°c file ƒë√£ t·∫°o:")
    print("   - data/processed/economy_data_processed.csv")
    print("   - data/processed/covid_data_processed.csv")