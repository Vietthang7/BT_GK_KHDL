import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

def load_and_clean_data(filepath):
    """Load and clean data"""
    df = pd.read_csv(filepath)
    
    # Data type conversion (S·ª¨A: 'data' ‚Üí 'date')
    if 'timestamp' in df.columns:
        df['timestamp'] = pd.to_datetime(df['timestamp'])
    if 'date' in df.columns:  # ‚Üê S·ª¨A L·ªñI TYPO
        df['date'] = pd.to_datetime(df['date'])
    
    # Handle missing values - CH·ªà ƒêI·ªÄN N·∫æU < 5% NULL
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    for col in numeric_cols:
        null_count = df[col].isnull().sum()
        null_pct = (null_count / len(df)) * 100
        
        if null_count > 0:
            if null_pct < 5:
                # N·∫øu < 5% missing, ƒëi·ªÅn b·∫±ng interpolation
                df[col] = df[col].interpolate(method='linear', limit_direction='both')
                print(f"  ‚úì ƒêi·ªÅn {null_count} gi√° tr·ªã thi·∫øu cho c·ªôt '{col}' ({null_pct:.1f}%)")
            else:
                # N·∫øu > 5% missing, c·∫£nh b√°o
                print(f"  ‚ö†Ô∏è C·ªôt '{col}' c√≥ {null_pct:.1f}% gi√° tr·ªã thi·∫øu - Gi·ªØ nguy√™n ho·∫∑c x√≥a c·ªôt")
    
    # Lo·∫°i b·ªè c√°c d√≤ng v·∫´n c√≤n null sau interpolate
    before_drop = len(df)
    df = df.dropna()
    after_drop = len(df)
    
    if before_drop > after_drop:
        print(f"  ‚úì ƒê√£ lo·∫°i b·ªè {before_drop - after_drop} d√≤ng c√≤n null")
    
    print(f"‚úì D·ªØ li·ªáu sau khi l√†m s·∫°ch: {df.shape}")
    return df

def create_features(df):
    """T·∫°o c√°c ƒë·∫∑c tr∆∞ng m·ªõi"""
    # X·ª≠ l√Ω cho data weather
    if 'timestamp' in df.columns:
        df['hour'] = df['timestamp'].dt.hour
        df['day'] = df['timestamp'].dt.day
        df['month'] = df['timestamp'].dt.month
        df['day_of_week'] = df['timestamp'].dt.dayofweek
        df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)
        df['date'] = df['timestamp'].dt.date
        
        # Ph√¢n lo·∫°i nhi·ªát ƒë·ªô
        if 'temperature' in df.columns:
            df['temp_category'] = pd.cut(df['temperature'], 
                                        bins=[-np.inf, 10, 20, 30, np.inf],
                                        labels=['L·∫°nh', 'M√°t', '·∫§m', 'N√≥ng'])
    
    # X·ª≠ l√Ω cho data COVID
    if 'date' in df.columns and 'cases' in df.columns:
        df['month'] = pd.to_datetime(df['date']).dt.month
        df['day_of_week'] = pd.to_datetime(df['date']).dt.dayofweek
        df['cases_change'] = df['cases'].pct_change() * 100
        df['deaths_change'] = df['deaths'].pct_change() * 100
        df['cases_ma7'] = df['cases'].rolling(window=7).mean()
        df['deaths_ma7'] = df['deaths'].rolling(window=7).mean()
    
    print(f"‚úì ƒê√£ t·∫°o {len(df.columns)} ƒë·∫∑c tr∆∞ng")
    return df

def process_all_data():
    """X·ª≠ l√Ω t·∫•t c·∫£ d·ªØ li·ªáu"""
    import os
    os.makedirs('data/processed', exist_ok=True)
    
    # X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi ti·∫øt
    print("\nüå§Ô∏è X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi ti·∫øt...")
    weather_df = load_and_clean_data('data/raw/weather_data.csv')
    weather_df = create_features(weather_df)
    weather_df.to_csv('data/processed/weather_data_processed.csv', index=False)
    print(f"‚úÖ ƒê√£ l∆∞u weather_data_processed.csv v·ªõi {len(weather_df)} b·∫£n ghi")
    
    # X·ª≠ l√Ω d·ªØ li·ªáu COVID-19
    print("\nü¶† X·ª≠ l√Ω d·ªØ li·ªáu COVID-19...")
    covid_df = load_and_clean_data('data/raw/covid_data.csv')
    covid_df = create_features(covid_df)
    covid_df.to_csv('data/processed/covid_data_processed.csv', index=False)
    print(f"‚úÖ ƒê√£ l∆∞u covid_data_processed.csv v·ªõi {len(covid_df)} b·∫£n ghi")
    
    print("\n‚úÖ ƒê√£ x·ª≠ l√Ω xong t·∫•t c·∫£ d·ªØ li·ªáu")
    return weather_df, covid_df

if __name__ == "__main__":
    process_all_data()